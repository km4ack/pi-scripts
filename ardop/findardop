#!/bin/bash
#A script to help locate winlink gateways
#ARDOP files must be download first using getardoplist
#getardoplist should be a daily cron job
#so the lists stay current. 
#See notes at top of getardoplist
#This script is provided AS IS
#Feel free to mod to suit your needs
#20181217 km4ack

######## USER CONFIG ####################

#Path to ARDOP files.
#Path below and path in getardoplist MUST MATCH
MYPATH=~/Documents/ardop-list

#Path for getardoplist script
SCRIPT_PATH=$HOME/ardop/getardoplist

#path for map pdf
MAP_PATH=$HOME/ardop/grid-map.pdf

#Select the pdf app on your system
#default is evince
#you can also use xpdf if you have it installed
#PDF_APP=xpdf
PDF_APP='evince -w'

#Bands
BANDS="80m 60m 40m 30m 20m 10m 6m 2m 70cm"

######### END USER CONFIG ################

##############SECTION ADDED 20191013###############

#Check if directory exist
if [ ! -d "$HOME/Documents/ardop-list" ]; then
BEFORE=""
else
BEFORE=$(ls $HOME/Documents/ardop-list)
fi

LIST=$(find $HOME/ardop -name getardoplist)

#Check to see if getardoplist is found at ~/ardop
if [ -z "$LIST" ]; then
  #Check to see if getardoplist is found at ~/bin
  LIST=$(find $HOME/bin -name getardoplist)
fi

if [ -z "$LIST" ]; then
  #Check to see if getardoplist is found at ~/bin
  LIST=$(find . -name getardoplist)
fi

LIST=$(echo $LIST | sed 's/getardoplist//')

#This will test to see if we have the getardoplist script
#and download if needed. It also checks to see if we have
#downloaded a list before. 
if [ -z "$BEFORE" ]; then
	if [ -z "$LIST" ]; then
    echo "Downloading getardoplist script"
	  mkdir -p $HOME/ardop
	  cd $HOME/ardop
	  wget https://raw.githubusercontent.com/km4ack/pi-scripts/master/ardop/getardoplist
	  chmod +x getardoplist
	  $HOME/ardop/getardoplist
	else
	  $LIST/getardoplist
	fi
else
  echo "The list has been downloaded before....continuing"
fi

echo FILE: $LIST

################END 20191013 ADDITION########################

function get_date_last_download() {
  local band=$1
  DL_DATE=$(head -n 1 $MYPATH/${band}ardoplist.txt)
  echo $DL_DATE
}

#clear
#Check that files have been downloaded before
if [ -f $MYPATH/ardoplist.txt ]; then
  echo
else
	echo
	echo
	echo
	echo
	printf "\033[1;31mPLEASE download files before proceeding\033[0m\n"
	printf "\033[1;31mType getardoplist to download the files\033[0m\n"
	echo
	echo 
	exit
fi

#Header for results
print_header () {
  echo 'Call        Grid   Dist    Azmuth               Dial Freq      Center Freq  Shortcut'
  echo '======================================================================================================='
}

print_menu() {
#Begin First Menu
clear
echo 
echo
echo
printf "\033[1;31mFor Best View, Maximize This Screen\033[0m\n"
echo
echo Set the grid to be searched. Refer to the map if needed.
echo
mainmenus='Set-Grid View-Map Download-List Quit'
PS3='Enter an Option Number: '
select menu in $mainmenus
do

if [[ -z "$menu" ]]; then
  echo 
  printf "\033[1;31mPLEASE SELECT A NUMBER\033[0m\n"
fi

if [[ -z "$menu" ]]; then
  echo
else
	if [ $menu == 'Quit' ]; then
	  exit
	fi
fi

if [[ -z "$menu" ]]; then
  echo
else
	if [ $menu == 'Set-Grid' ]; then
	  echo
	  echo 
	  read -p 'Please enter the first two letters of the grid to be searched: ' lett
	  clear
		if [[ -z "$lett" ]]; then
		  echo
		  echo "YOU SHOULD SET THE GRID"
		  echo "OR THE SEARCH WON'T WORK"
		fi
	  echo
	  printf "\033[1;31mGrid to be searched is $lett\033[0m\n"
	  echo
	  break
	fi
fi

if [[ -z "$menu" ]]; then
  echo 
else
	if [ $menu == 'View-Map' ]; then
    $PDF_APP $MAP_PATH
	fi
fi
#############################################################
if [[ -z "$menu" ]]; then
	echo
else
	if [ $menu == 'Download-List' ]; then #Downloads new ardop list
	  echo "Please wait while we check for an internet connection"
	  echo "This may take up to 30 seconds"
	  wget -q --tries=5 --timeout=20 --spider http://google.com #checks internet connection
		if [[ $? -eq 0 ]]; then
      #0 indicates internet connection
		  echo
		  echo "Connected"
		  echo
		  echo "Please wait....."
		  echo "This may take several minutes to complete"
		  echo "Depending on your internet speed"
      if [ -f "$SCRIPT_PATH" ]; then
		    OUTPUT=$("$SCRIPT_PATH") #Calls getardoplist script
      else
        bash $LIST/getardoplist
      fi
		  echo
		  echo "Done"
		  echo
		else
		  echo
		  echo "YOU ARE NOT ONLINE"
		  echo "PLEASE CONNECT AND TRY AGAIN"
		  echo
		fi
	fi
fi
done
print_menu2
}

print_menu2() {
#Begin Second Menu
echo
echo Now choose the band you wish to use
echo
names="Change-Grid $BANDS Quit"

PS3='Enter an Option Number: '

select name in $names
do

if [[ -z "$name" ]]; then
  echo 
  printf "\033[1;31mPLEASE SELECT A NUMBER\033[0m\n"
fi

if [[ -z "$name" ]]; then
  echo
else
	if [ $name == 'Quit' ]; then
    break
    #exit
	fi
fi

#Give option to change the grid being searched
if [[ -z "$name" ]]; then
  echo
else
	if [ $name == 'Change-Grid' ]; then
	  read -p 'Enter the grid to be searched: ' lett
	  clear
	  if [[ -z "$lett" ]]; then
      echo
      echo "YOU SHOULD SET THE GRID"
      echo "OR THE SEARCH WON'T WORK"
    fi
	  echo
	  printf "\033[1;31mGrid to be searched is $lett\033[0m\n"
	  echo
	  print_menu2
	fi
fi

#Find and return results of grid search 20M
if [[ -z "$name" ]]; then
  echo
else
  FILE=$MYPATH/${name}ardoplist.txt
  clear
  echo
  echo
  get_date_last_download $name
  print_header
  cat $FILE | egrep -i "$lett[[:digit:]]{2}"
  print_menu2
fi

done

print_menu
}

print_menu
print_menu2

echo Bye
